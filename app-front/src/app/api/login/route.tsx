import { NextRequest, NextResponse } from "next/server";

const API = process.env.NEXT_PUBLIC_API_URL;

export async function POST(request: NextRequest) {
  try {
    // —á–∏—Ç–∞–µ–º email/password –∏–∑ —Ç–µ–ª–∞
    const { email, password } = await request.json();

    // –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ FastAPI
    const apiRes = await fetch(`${API}/auth/jwt/login`, {
      method: "POST",
      headers: {
        // FastAPI Users –∂–¥—ë—Ç form-urlencoded
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: new URLSearchParams({
        username: email,
        password,
      }).toString(),
    });

    // –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º Set-Cookie, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const setCookieHeader = apiRes.headers.get("set-cookie") ?? "";

    // –ï—Å–ª–∏ –±—ç–∫ –≤–µ—Ä–Ω—É–ª 204 ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 204 –±–µ–∑ —Ç–µ–ª–∞, —Å cookie
    if (apiRes.status === 204) {
      return new NextResponse(null, {
        status: 204,
        headers: {
          // –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç
          "set-cookie": setCookieHeader,
        },
      });
    }

    // –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –±—ç–∫ –æ—Ç–¥–∞—ë—Ç JSON —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –¥–∞–ª—å—à–µ
    const errorPayload = await apiRes.json();
    return NextResponse.json(errorPayload, {
      status: apiRes.status,
      headers: {
        "set-cookie": setCookieHeader,
      },
    });
  } catch (err) {
    console.error("üö® [route.tsx] /api/login error:", err);
    return NextResponse.json(
      { error: "Login proxy internal error" },
      { status: 500 }
    );
  }
}